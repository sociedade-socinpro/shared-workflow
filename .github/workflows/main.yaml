# shared-workflows/.github/workflows/build-and-deploy.yml

name: Build and Deploy

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      branch:
        required: true
        type: string
      ecr-repository: 
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID: 
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
jobs: 
  build-applications:
    name: Build and create artifact
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/setup-java@v4
      with:
        distribution: 'corretto' # See 'Supported distributions' for available options
        java-version: '17'
        cache: 'maven'

    - name: Set build paramter
      id: set-java-build-option
      run: |
        if [ "${{ inputs.branch }}" = "main" ]; then
          echo "::set-output name=JAVA_BUILD_PROFILE::-Dspring.profiles.active=production"
        else
          echo "::set-output name=JAVA_BUILD_PROFILE::-Dspring.profiles.active=development"
        fi

    - name: Build with Maven
      #run: mvn -B package --file pom.xml
      run: mvn -B package -DskipTests ${{ steps.set-java-build-option.outputs.JAVA_BUILD_PROFILE }} --file pom.xml

    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v3
      with:
        name: sipa-app
        path: target/*.jar

  code-evaluation: 
    name: Security checks
    runs-on: ubuntu-latest
    needs: build-applications
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: "https://sonar.socinpro.org.br"
        #SONAR_HOST_URL: "http://ec2-3-226-198-174.compute-1.amazonaws.com:9000"

  push-to-ecr:
    name: Push to ECR
    runs-on: ubuntu-latest
    needs: code-evaluation
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download JAR Artifact
      uses: actions/download-artifact@v3
      with:
        name: sipa-app
        path: ./artifacts

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get the last commit message
      id: get_commit_message
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_ENV

    - name: Determine commit type
      id: determine_commit_type
      run: |
        if [[ "${{ env.commit_message }}" == release:* ]]; then
          echo "commit_type=Release" >> $GITHUB_ENV
        elif [[ "${{ env.commit_message }}" == hotfix:* ]]; then
          echo "commit_type=Hotfix" >> $GITHUB_ENV
        elif [[ "${{ env.commit_message }}" == patch:* ]]; then
          echo "commit_type=Patch" >> $GITHUB_ENV
        else
          echo "commit_type=Release" >> $GITHUB_ENV
        fi

    - name: Automatic Tagging of Releases 
      id: increment-git-tag
      run: |
        chmod +x version.sh
        ./version.sh -v ${{ env.commit_type }}
      env:
        GIT_AUTHOR_NAME: github-actions
        GIT_AUTHOR_EMAIL: github-actions@github.com

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
